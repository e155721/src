for (i in list_length) {
l[[i]] <- array(array_length)
}
for (i in 1:list_length) {
j = 1
while (j<array_length+1) {
sym <- word_list[[i]][j]
if (sym != "-1") {
sym <- is.element(word_list[[i]][j], vowel)
} else {
sym <- "-1"
}
if (sym == TRUE) {
l[[i]][j] <- "V"
}
else if (sym == "-1") {
l[[i]][j] <- "-1"
}
else {
l[[i]][j] <- "C"
}
j <- j+1
}
}
l
Translate_SymbolArrays_into_VC <- function(data_file)
{
# make word list
makeWordList <- function(file)
{
# load words data
sheet <- read.table(file, sep = " ")
sheet <- as.matrix(sheet)
nrow <- dim(sheet)[1]
word_list <- list()
for (i in 1:nrow) {
tmpList <- as.vector(sheet[i,])
word_list[[i]] <- tmpList[!is.na(tmpList)]
}
return(word_list)
}
word_list <-  makeWordList(data_file)
vowel <- read.table("vowel.txt")
vowel <- vowel$V1
list_length <- length(word_list)
array_length <- length(word_list[[1]])
l <- list()
for (i in list_length) {
l[[i]] <- array(array_length)
}
for (i in 1:list_length) {
j = 1
while (j<array_length+1) {
sym <- word_list[[i]][j]
if (sym != "-1") {
sym <- is.element(word_list[[i]][j], vowel)
} else {
sym <- "-1"
}
if (sym == TRUE) {
l[[i]][j] <- "V"
}
else if (sym == "-1") {
l[[i]][j] <- "-1"
}
else {
l[[i]][j] <- "C"
}
j <- j+1
}
}
#output_file <- paste("output/", data_file, sep = "")
#write.table(l, output_file)
}
Translate_SymbolArrays_into_VC("data.txt")
Translate_SymbolArrays_into_VC <- function(data_file)
{
# make word list
makeWordList <- function(file)
{
# load words data
sheet <- read.table(file, sep = " ")
sheet <- as.matrix(sheet)
nrow <- dim(sheet)[1]
word_list <- list()
for (i in 1:nrow) {
tmpList <- as.vector(sheet[i,])
word_list[[i]] <- tmpList[!is.na(tmpList)]
}
return(word_list)
}
word_list <-  makeWordList(data_file)
vowel <- read.table("vowel.txt")
vowel <- vowel$V1
list_length <- length(word_list)
array_length <- length(word_list[[1]])
l <- list()
for (i in list_length) {
l[[i]] <- array(array_length)
}
for (i in 1:list_length) {
j = 1
while (j<array_length+1) {
sym <- word_list[[i]][j]
if (sym != "-1") {
sym <- is.element(word_list[[i]][j], vowel)
} else {
sym <- "-1"
}
if (sym == TRUE) {
l[[i]][j] <- "V"
}
else if (sym == "-1") {
l[[i]][j] <- "-1"
}
else {
l[[i]][j] <- "C"
}
j <- j+1
}
}
output_file <- paste("output/", data_file, sep = "")
write.table(l, output_file)
}
Translate_SymbolArrays_into_VC("data.txt")
Translate_SymbolArrays_into_VC("data.txt")
write(l, output_file)
for (i in 1:list_length) {
line <- paste(l[[i]], "\n")
write.table(line, output_file)
}
line
line <- c(l[[i]], "\n")
line
for (i in 1:list_length) {
line <- c(l[[i]], "\n")
write.table(line, output_file)
}
list_lenght
list_length
l
for (i in 1:list_length) {
line <- c(l[[i]], "\n")
write.table(line, output_file, append = TRUE)
}
for (i in 1:list_length) {
line <- c(l[[i]], "\n")
line <- as.array(line)
write.table(line, output_file, append = TRUE)
}
line
class[line]
class(line)
a <- matrix("a", 3,3)
a
a <- as.matrix(l)
a
a[[1]]
View(a)
class(a)
a$3
a[,3]
a[,2]
a[,1]
write.table(a[,1], "hoge.t")
rlt <- as.matrix()
rlt <- matrix(NA, nrow = list_length, ncol = array_length)
a <- matrxi(0, 3,3)
a <- matrix(0,3,3)
a
a[1,1] <-
""
""
a
a[1,] <- c("a", "a", "a")
a
a[1,] <- "b"
a
rlt <- matrix(NA, nrow = list_length, ncol = array_length)
for (i in 1:list_length) {
rlt[i,] <- l[[i]]
}
rlt
write.table(rlt, "hoge.t")
rlt
rlt[1]
ls
ls
# Fri Aug 24 12:50:06 2018 ------------------------------
Translate_SymbolArrays_into_VC <- function(data_file)
{
# make word list
makeWordList <- function(file)
{
# load words data
sheet <- read.table(file, sep = " ")
sheet <- as.matrix(sheet)
nrow <- dim(sheet)[1]
word_list <- list()
for (i in 1:nrow) {
tmpList <- as.vector(sheet[i,])
word_list[[i]] <- tmpList[!is.na(tmpList)]
}
return(word_list)
}
word_list <-  makeWordList(data_file)
vowel <- read.table("vowel.txt")
vowel <- vowel$V1
list_length <- length(word_list)
array_length <- length(word_list[[1]])
l <- list()
for (i in list_length) {
l[[i]] <- array(array_length)
}
for (i in 1:list_length) {
j = 1
while (j<array_length+1) {
sym <- word_list[[i]][j]
if (sym != "-1") {
sym <- is.element(word_list[[i]][j], vowel)
} else {
sym <- "-1"
}
if (sym == TRUE) {
l[[i]][j] <- "V"
}
else if (sym == "-1") {
l[[i]][j] <- "-1"
}
else {
l[[i]][j] <- "C"
}
j <- j+1
}
}
rlt <- matrix(NA, nrow = list_length, ncol = array_length)
for (i in 1:list_length) {
rlt[i,] <- l[[i]]
}
output_file <- paste("output/", data_file, sep = "")
write.table(rlt, "output_file")
}
Translate_SymbolArrays_into_VC("data.txt")
Translate_SymbolArrays_into_VC <- function(data_file)
{
# make word list
makeWordList <- function(file)
{
# load words data
sheet <- read.table(file, sep = " ")
sheet <- as.matrix(sheet)
nrow <- dim(sheet)[1]
word_list <- list()
for (i in 1:nrow) {
tmpList <- as.vector(sheet[i,])
word_list[[i]] <- tmpList[!is.na(tmpList)]
}
return(word_list)
}
word_list <-  makeWordList(data_file)
vowel <- read.table("vowel.txt")
vowel <- vowel$V1
list_length <- length(word_list)
array_length <- length(word_list[[1]])
l <- list()
for (i in list_length) {
l[[i]] <- array(array_length)
}
for (i in 1:list_length) {
j = 1
while (j<array_length+1) {
sym <- word_list[[i]][j]
if (sym != "-1") {
sym <- is.element(word_list[[i]][j], vowel)
} else {
sym <- "-1"
}
if (sym == TRUE) {
l[[i]][j] <- "V"
}
else if (sym == "-1") {
l[[i]][j] <- "-1"
}
else {
l[[i]][j] <- "C"
}
j <- j+1
}
}
rlt <- matrix(NA, nrow = list_length, ncol = array_length)
for (i in 1:list_length) {
rlt[i,] <- l[[i]]
}
output_file <- paste("output/", data_file, sep = "")
write.table(rlt, output_file)
}
Translate_SymbolArrays_into_VC("data.txt")
ls
setwd(tmp)
setwd("tmp")
list.files()
a <- list.files()
a
a[1]
for (f in a) {}
for (f in a) { print(f) }
ls
setwd("..")
list.files("tmp")
dir <- list.files("tmp")
for (f in dir) {
Translate_SymbolArrays_into_VC(f)}
dir
paste("tmp/", dir, sep="")
dir <- paste("tmp/" list.files("tmp"), sep="")
dir <- paste("tmp/", list.files("tmp"), sep="")
dir
for (f in dir) {
Translate_SymbolArrays_into_VC(f)}
dir
a <- dir[1]
a
strsplit(a, "/")
strsplit(a, "/")[1]
class(strsplit(a, "/"))
strsplit(a, "/")[[1]][1]
strsplit(a, "/")[1][1]
strsplit(a, "/")[[1]][1]
Translate_SymbolArrays_into_VC <- function(data_file)
{
data_file <- strsplit(data_file, "/")[[1]][2]
# make word list
makeWordList <- function(file)
{
# load words data
sheet <- read.table(file, sep = " ")
sheet <- as.matrix(sheet)
nrow <- dim(sheet)[1]
word_list <- list()
for (i in 1:nrow) {
tmpList <- as.vector(sheet[i,])
word_list[[i]] <- tmpList[!is.na(tmpList)]
}
return(word_list)
}
word_list <-  makeWordList(data_file)
vowel <- read.table("vowel.txt")
vowel <- vowel$V1
list_length <- length(word_list)
array_length <- length(word_list[[1]])
l <- list()
for (i in list_length) {
l[[i]] <- array(array_length)
}
for (i in 1:list_length) {
j = 1
while (j<array_length+1) {
sym <- word_list[[i]][j]
if (sym != "-1") {
sym <- is.element(word_list[[i]][j], vowel)
} else {
sym <- "-1"
}
if (sym == TRUE) {
l[[i]][j] <- "V"
}
else if (sym == "-1") {
l[[i]][j] <- "-1"
}
else {
l[[i]][j] <- "C"
}
j <- j+1
}
}
rlt <- matrix(NA, nrow = list_length, ncol = array_length)
for (i in 1:list_length) {
rlt[i,] <- l[[i]]
}
output_file <- paste("output/", data_file, sep = "")
write.table(rlt, output_file)
}
for (f in dir) {
Translate_SymbolArrays_into_VC(f)
}
Translate_SymbolArrays_into_VC <- function(data_file)
{
# make word list
makeWordList <- function(file)
{
# load words data
sheet <- read.table(file, sep = " ")
sheet <- as.matrix(sheet)
nrow <- dim(sheet)[1]
word_list <- list()
for (i in 1:nrow) {
tmpList <- as.vector(sheet[i,])
word_list[[i]] <- tmpList[!is.na(tmpList)]
}
return(word_list)
}
word_list <-  makeWordList(data_file)
vowel <- read.table("vowel.txt")
vowel <- vowel$V1
list_length <- length(word_list)
array_length <- length(word_list[[1]])
l <- list()
for (i in list_length) {
l[[i]] <- array(array_length)
}
for (i in 1:list_length) {
j = 1
while (j<array_length+1) {
sym <- word_list[[i]][j]
if (sym != "-1") {
sym <- is.element(word_list[[i]][j], vowel)
} else {
sym <- "-1"
}
if (sym == TRUE) {
l[[i]][j] <- "V"
}
else if (sym == "-1") {
l[[i]][j] <- "-1"
}
else {
l[[i]][j] <- "C"
}
j <- j+1
}
}
rlt <- matrix(NA, nrow = list_length, ncol = array_length)
for (i in 1:list_length) {
rlt[i,] <- l[[i]]
}
output_file <- paste("output/", strsplit(data_file, "/")[[1]][2], sep = "")
write.table(rlt, output_file)
}
for (f in dir) {
Translate_SymbolArrays_into_VC(f)
}
ls
a
strsplit(a, "/")
tail(strsplit(a, "/"))
tail(strsplit(a, "/")[[1]])
s <- strsplit(a, "/")[[1]]
s
s[1]
tail[s]
tail(s)
tail(s[1])
class(s)
strsplit(a, "/")[[1]]
strsplit(a, "/")[[1]][length(strsplit(a,"/")[[1]])]
Translate_SymbolArrays_into_VC <- function(data_file)
{
# make word list
makeWordList <- function(file)
{
# load words data
sheet <- read.table(file, sep = " ")
sheet <- as.matrix(sheet)
nrow <- dim(sheet)[1]
word_list <- list()
for (i in 1:nrow) {
tmpList <- as.vector(sheet[i,])
word_list[[i]] <- tmpList[!is.na(tmpList)]
}
return(word_list)
}
word_list <-  makeWordList(data_file)
vowel <- read.table("vowel.txt")
vowel <- vowel$V1
list_length <- length(word_list)
array_length <- length(word_list[[1]])
l <- list()
for (i in list_length) {
l[[i]] <- array(array_length)
}
for (i in 1:list_length) {
j = 1
while (j<array_length+1) {
sym <- word_list[[i]][j]
if (sym != "-1") {
sym <- is.element(word_list[[i]][j], vowel)
} else {
sym <- "-1"
}
if (sym == TRUE) {
l[[i]][j] <- "V"
}
else if (sym == "-1") {
l[[i]][j] <- "-1"
}
else {
l[[i]][j] <- "C"
}
j <- j+1
}
}
rlt <- matrix(NA, nrow = list_length, ncol = array_length)
for (i in 1:list_length) {
rlt[i,] <- l[[i]]
}
path_length <- length(strsplit(data_file, "/")[[1]])
output_file <- paste("output/", strsplit(data_file, "/")[[1]][path_length], sep = "")
write.table(rlt, output_file)
}
for (f in dir) {
Translate_SymbolArrays_into_VC(f)
}
