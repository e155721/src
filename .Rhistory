scoringMatrix["i","i"]
scoringMatrix["i","i"] <- 0.9305555555555556
scoringMatrix["i:","i:"] <- 0.013888888888888888
scoringMatrix["u:","u:"] <- 1
scoringMatrix["u","u"] <- 1
scoringMatrix
scoringMatrix["p","p"] <- 0.05555555555555555
scoringMatrix
4/72
scoringMatrix["k","k"] <- 47/72
scoringMatrix["u","u"] <- 1
scoringMatrix["b","b"] <- 64/72
scoringMatrix["i","i"] <- 66/72
scoringMatrix["i:","i:"] <- 1/72
scoringMatrix["kx","kx"] <- 20/72
scoringMatrix["kh","kh"] <- 5/72
scoringMatrix["p","p"] <- 4/72
scoringMatrix["d","d"] <- 1/72
scoringMatrix
size <- length(word_list)
rlt <- list()
#for (i in 2:73) {
for (i in 1:10) {
#sink("test.aln", append = T)
print(i)
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
#sink()
}
scoringMatrix
scoringMatrix[2:9,"k"]
scoringMatrix[2:9,"k"] <- -scoringMatrix["k","k"]
scoringMatrix
scoringMatrix[2:9,"kx"] <- -scoringMatrix["kx","kx"]
socri
scoringMatrix
scoringMatrix[2,2] <- -scoringMatrix[2,2]
scoringMatrix
scoringMatrix[4:9,"kh"] <- -scoringMatrix["kh","kh"]
scoringMatrix
tablex()
xtable()
xtable(scoringMatrix)
scoringMatrix
scoringMatrix[5:9,"kh"] <- -scoringMatrix["u","u"]
scoringMatrix
scoringMatrix[6:9,"kh"] <- -scoringMatrix["b","b"]
scoringMatrix
scoringMatrix[4:9,"kh"] <- -scoringMatrix["kh","kh"]
scoringMatrix
scoringMatrix[6:9,"b"] <- -scoringMatrix["b","b"]
scoringMatrix
scoringMatrix[7:9,"p"] <- -scoringMatrix["p","p"]
scori
scoringMatrix
scoringMatrix[8:9,"d"] <- -scoringMatrix["d","d"]
scoringMatrix
scoringMatrix[9:9,"i"] <- -scoringMatrix["i","i"]
scoringMatrix
test <- scoringMatrix
test
lower.tri(test)
test[lower.tri]
test[lower.tri(test)]
test <- test[lower.tri(test)]
test
test[upper.tri]
test[upper.tri(test)]
test
test <- scoringMatrix
ltri <- test[lower.tri(test)]
test[upper.tri(test)]
test[upper.tri(test)] <- t(ltri)
test
dim(test)
test[upper.tri(test)]
test[upper.tri(test)] <- scoringMatrix[lower.tri(scoringMatrix)]
test
test[upper.tri(test)] <- t(scoringMatrix[lower.tri(scoringMatrix)])
test
t(test)
scoringMatrix
score1
score1 <- scoringMatrix
scor1[1:8, "i:"] <- scoringMatrix[2:9,"k"]
score1[1:8, "i:"] <- scoringMatrix[2:9,"k"]
score1
score1[1:7, "i"] <- scoringMatrix[3:9,"kx"]
score1
score1[1:6, "d"] <- scoringMatrix[4:9,"kh"]
score1
score1[1:5, "p"] <- scoringMatrix[5:9,"u"]
score1
t1 <- scoringMatrix
t1
t1[upper.tri(t1)]
t1[upper.tri(t1)] <- 0
t1
t(t1)
t1[upper.tri(t1)] <- t(t1[upper.tri(t1)])
t1
t(t1[upper.tri(t1)])
t1 <- scoringMatrix
t2 <- t1[upper.tri(t1)]
t2
t1[upper.tri(t1)]
t1
t1[upper.tri(t1)]
t2 <- t(t1)
t2
t1
t1[upper.tri(t1)]
t1[upper.tri(t1)] <- t2
t1[upper.tri(t1)] <- t2[upper.tri(t2)]
t1
BACK_UP_SCORE <-  scoringMatrix
scoringMatrix <- t1
size <- length(word_list)
rlt <- list()
#for (i in 2:73) {
for (i in 1:10) {
#sink("test.aln", append = T)
print(i)
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
#sink()
}
scoringMatrix
p <- -3
size <- length(word_list)
rlt <- list()
#for (i in 2:73) {
for (i in 1:10) {
#sink("test.aln", append = T)
print(i)
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
#sink()
}
size <- length(word_list)
rlt <- list()
#for (i in 2:73) {
for (i in 1:10) {
sink("test.aln", append = T)
print(i)
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
sink()
}
scoringMatrix
xtable(scoringMatrix)
sink("mat.tex")
xtable(scoringMatrix)
sink()
#for (i in 2:73) {
for (i in -2:-10) {
for (i in 1:10) {
sink("test.aln", append = T)
print(i)
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
sink()
}
}
-2:-10
#for (i in 2:73) {
for (p in -2:-10) {
for (i in 1:10) {
sink("test.aln", append = T)
print(i)
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
sink()
}
}
#for (i in 2:73) {
for (p in -2:-10) {
for (i in 1:10) {
sink("test.aln", append = T)
print(i)
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
sink()
}
}
#for (i in 2:73) {
for (p in 2:10) {
for (i in 1:10) {
sink("test.aln", append = T)
print(i)
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), -p)
sink()
}
}
#for (i in 2:73) {
for (p in -2:-10) {
for (i in 1:10) {
sink("test.aln", append = T)
print(i)
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
sink()
}
}
#for (i in 2:73) {
for (p in -2:-100) {
for (i in 1:10) {
sink("test.aln", append = T)
print(i)
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
sink()
}
}
#for (i in 2:73) {
for (p in -2:-2) {
for (i in 1:10) {
sink("test.aln", append = T)
print(i)
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
sink()
}
}
#for (i in 2:73) {
for (p in -2:-2) {
for (i in 1:10) {
sink("test.aln", append = T)
print(paste(i, word_list[[i]]), sep = ": ")
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
sink()
}
}
point <- read.table("point")
point
point[1]
point <- read.table("point", sep = " ")
point
point[1]
point <- as.list(read.table("point", sep = " "))
point
point[1]
point <- read.table("point", sep = " ", header = F)
point
point[1]
p <- read.table("p")
p <- read.table("p", sep = " ")
p <- read.table("p", sep = " ", header = F)
# make scoring matrix for alphabets
dimnames <- c(LETTERS)
scoringMatrix <- matrix(-1, nrow = 26, ncol = 26,
dimnames = list(dimnames, dimnames))
diag(scoringMatrix) <- 3
write.table(scoringMatrix, "scoring_matrix_for_alphabets.txt")
##############################################################
dimnames <- c("k", "kx", "kh", "u", "b", "p", "d", "i", "i:")
len <- length(dimnames)
scoringMatrix <- matrix(-1, nrow = len, ncol = len,
dimnames = list(dimnames, dimnames))
diag(scoringMatrix) <- -1
p <- -2
# data
library(openxlsx)
for (i in 6:6) {
#for (i in 6:135) {
sheetNum <- i
sheet <- read.xlsx("test.xlsm", sheet = sheetNum)[,12:27]
write.table(sheet, paste("sheet-", sheetNum, sep = ""))
}
# load words data
sheet <- read.table("sheet-6.txt", sep = " ")
sheet <- as.matrix(sheet)
row <- dim(sheet)[1]
word_list <- list()
for (i in 1:row) {
tmp <- sheet[i,]
word_list[[i]] <- tmp[!is.na(tmp)]
}
for (i in 6:6) {
#for (i in 6:135) {
sheetNum <- i
sheet <- read.xlsx("test.xlsm", sheet = sheetNum)[,12:27]
write.table(sheet, paste("sheet-", sheetNum, sep = ""))
}
# Seminar of Friday
for (i in 6:6) {
#for (i in 6:135) {
sheetNum <- i
sheet <- read.xlsx("test.xlsm", sheet = sheetNum)[,1:27]
write.table(sheet, paste("sheet-", sheetNum, sep = ""))
}
# load words data
sheet <- read.table("y.dat", sep = " ")
sheet <- as.matrix(sheet)
row <- dim(sheet)[1]
word_list <- list()
for (i in 1:row) {
tmp <- sheet[i,]
word_list[[i]] <- tmp[!is.na(tmp)]
}
point <- read.table("point", sep = " ", header = F)
p <- read.("p", sep = " ", header = F)
word_list
p <- -2
scoringMatrix
t1
t2
BACK_UP_SCORE
scoringMatrix <- t1
size <- length(word_list)
rlt <- list()
#for (i in 2:73) {
for (p in -2:-2) {
for (i in 1:10) {
sink("test.aln", append = T)
print(paste(i, word_list[[i]]), sep = ": ")
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
sink()
}
}
size <- length(word_list)
rlt <- list()
#for (i in 2:73) {
for (p in -2:-2) {
for (i in 1:10) {
#sink("test.aln", append = T)
print(paste(i, word_list[[i]]), sep = ": ")
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
#sink()
}
}
source("needleman_wunsch/Functions.R")
needlemanWunsch <- function(seq1, seq2, p = -1)
{
# this code defines gap penalty
#p <- -1
# initialize variable
seq1 <- append(seq1, NA, after = 0)
seq2 <- append(seq2, NA, after = 0)
# scoringMatrix <- read.table("scoring_matrix_for_alphabets.txt")
#s <- s$new(seq1, seq2,
#as.matrix(read.table(scoringMatrix)))
s <- s$new(seq1, seq2, scoringMatrix)
# calculate matrix for sequence alignment
mat <- makeMatrix(seq1, seq2)
mat <- initializeMat(mat, p)
rowLen <- length(seq1)
colLen <- length(seq2)
for (i in 2:rowLen) {
for (j in 2: colLen) {
mat[i,j, 1] <- D(mat,i,j,p,s)[[1]]
mat[i,j, 2] <- D(mat,i,j,p,s)[[2]]
j = j + 1
}
i = i + 1
}
# trace back
score <- gap <- c()
i <- rowLen
j <- colLen
n <- 1
score <- mat[i, j, 1]
while (TRUE) {
if (i == 1 && j == 1) break
gap[n] <- mat[i, j, 2]
n <- n + 1
trace <- mat[i, j, 2]
if (trace == 0) {
i <- i - 1
j <- j - 1
} else if (trace == 1) {
i <- i - 1
} else if (trace == -1){
j <- j - 1
}
}
gap <- rev(gap)
# output alignment
s1 <- seq1[2:length(seq1)]
s2 <- seq2[2:length(seq2)]
align1 <- align2 <- c()
i <- j <- 1
for (t in 1:length(gap)) {
if(gap[t] == 0) {
align1 <- append(align1, s1[i])
align2 <- append(align2, s2[j])
i <- i + 1
j <- j + 1
} else if(gap[t] == 1) {
align1 <- append(align1, s1[i])
align2<- append(align2, "_")
i <- i + 1
} else {
align1 <- append(align1, "_")
align2 <- append(align2, s2[j])
j <- j + 1
}
}
if(0) {
align <- list()
align[[1]] <- c("seq1: ", align1)
align[[2]] <- c("seq2: ", align2)
align[[3]] <- c("score: ", score)
return(align)
}
if(1) {
print(c("seq1: ", align1), quote = F)
print(c("seq2: ", align2), quote = F)
#print(c("score: ", score), quote = F)
}
}
source("needleman_wunsch/Functions.R")
needlemanWunsch <- function(seq1, seq2, p = -1)
{
# this code defines gap penalty
#p <- -1
# initialize variable
seq1 <- append(seq1, NA, after = 0)
seq2 <- append(seq2, NA, after = 0)
# scoringMatrix <- read.table("scoring_matrix_for_alphabets.txt")
#s <- s$new(seq1, seq2,
#as.matrix(read.table(scoringMatrix)))
s <- s$new(seq1, seq2, scoringMatrix)
# calculate matrix for sequence alignment
mat <- makeMatrix(seq1, seq2)
mat <- initializeMat(mat, p)
rowLen <- length(seq1)
colLen <- length(seq2)
for (i in 2:rowLen) {
for (j in 2: colLen) {
mat[i,j, 1] <- D(mat,i,j,p,s)[[1]]
mat[i,j, 2] <- D(mat,i,j,p,s)[[2]]
j = j + 1
}
i = i + 1
}
# trace back
score <- gap <- c()
i <- rowLen
j <- colLen
n <- 1
score <- mat[i, j, 1]
while (TRUE) {
if (i == 1 && j == 1) break
gap[n] <- mat[i, j, 2]
n <- n + 1
trace <- mat[i, j, 2]
if (trace == 0) {
i <- i - 1
j <- j - 1
} else if (trace == 1) {
i <- i - 1
} else if (trace == -1){
j <- j - 1
}
}
gap <- rev(gap)
# output alignment
s1 <- seq1[2:length(seq1)]
s2 <- seq2[2:length(seq2)]
align1 <- align2 <- c()
i <- j <- 1
for (t in 1:length(gap)) {
if(gap[t] == 0) {
align1 <- append(align1, s1[i])
align2 <- append(align2, s2[j])
i <- i + 1
j <- j + 1
} else if(gap[t] == 1) {
align1 <- append(align1, s1[i])
align2<- append(align2, "_")
i <- i + 1
} else {
align1 <- append(align1, "_")
align2 <- append(align2, s2[j])
j <- j + 1
}
}
if(0) {
align <- list()
align[[1]] <- c("seq1: ", align1)
align[[2]] <- c("seq2: ", align2)
align[[3]] <- c("score: ", score)
return(align)
}
if(1) {
print(c("seq1: ", align1), quote = F)
print(c("seq2: ", align2), quote = F)
#print(c("score: ", score), quote = F)
}
}
size <- length(word_list)
rlt <- list()
#for (i in 2:73) {
for (p in -2:-2) {
for (i in 1:10) {
#sink("test.aln", append = T)
print(paste(i, word_list[[i]]), sep = ": ")
needlemanWunsch(as.vector(word_list[[1]]), as.vector(word_list[[i]]), p)
#sink()
}
}
a <- read.table("a", sep = " ")
a
# load words data
sheet <- read.table("a", sep = " ")
sheet <- as.matrix(sheet)
row <- dim(sheet)[1]
word_list <- list()
for (i in 1:row) {
tmp <- sheet[i,]
word_list[[i]] <- tmp[!is.na(tmp)]
}
word_list
word_list[[1]]
help(R6)
a <- array(1,)
a
View(sum)
.Primitive(sum)
p
point
